# vim:filetype=lua

lib/libluacontrol.so

lib/libdbgprinter.so

lib/libcpuload.so

lib/libmemory.so

lib/libderivative.so

lib/libaggregateall.so

lib/libnet_ip.so

==
luacontrol
==
package.path = package.path .. ';./lib/?.lua'
package.cpath = package.cpath .. ';./lib/lib?.so;'
dmm = require("dmm")
ffi = require("ffi")
S = require("posix.sys.socket")
FC = require("posix.fcntl")
bit = require("bit")

dmm.ll_ipath = dmm.ll_ipath .. ';lib/?.i'
dmm.hl_ipath = dmm.hl_ipath .. ';lib/?.lua'
local Dbgprinter = assert(dmm.require_interface('dbgprinter'))
local Derivative = assert(dmm.require_interface('derivative'))
local Aggregateall = assert(dmm.require_interface('aggregateall'))
assert(dmm.require_interface('prepend'))
assert(dmm.require_interface('demux'))
local Net_ip = assert(dmm.require_interface('net/ip'))

function rcvmsg(src, cmsg)
  print(src)
  print(cmsg)

  print(cmsg.cm_src)
  print(cmsg.cm_type)
  print(cmsg.cm_cmd)
  print(cmsg.cm_flags)
  print(cmsg.cm_len)

  return true
end

function handle_sockevent_trigger(src, msg, tm_u)
  print(src, msg, tm_u)
  print(tm_u.fd)
  local buf = S.recv(tm_u.fd, 100)
  print('-------------------')
  print(buf)
  print(#buf)
  print('-------------------')

--  dmm.sockevent_unsubscribe(node_id, tm_u.id)

  return true
end

dmm.set_default_message_handler(rcvmsg)
dmm.set_message_handler(ffi.C.DMM_MSGTYPE_GENERIC, ffi.C.DMM_MSG_SOCKEVENTTRIGGER, handle_sockevent_trigger, 'struct dmm_msg_sockeventtrigger')

local cpuload = dmm.Module:new('cpuload')
local memory = dmm.Module:new('memory')
local derivative = Derivative:new()
local dbgprinter = Dbgprinter:new()
local aggregateall = Aggregateall:new()

dbgprinter:set(500, 509, 'float')
dbgprinter:set(520, 564, 'uint64_t')
dbgprinter:set(720, 764, 'float')
dbgprinter:set(120, 123, 'float')
dbgprinter:set(800, 809, 'float')

derivative:set(100, 103, 'int64_t', true, 110)
derivative:set(520, 564, 'int64_t', true, 720)
derivative:set(600, 605, 'int64_t', true, 620)

aggregateall:set(110, 113, 'uint64_t', 120)
aggregateall:set(500, 509, 'float', 800)

--cpuload:connect('out', dbgprinter, 'in')
--memory:connect('out', dbgprinter, 'in')

local timer = dmm.Timer:new()
local aggtimer = dmm.Timer:new()

local s = assert(S.socket(S.AF_INET, S.SOCK_DGRAM, 0))
assert(FC.fcntl(s, FC.F_SETFD, FC.FD_CLOEXEC))
assert(FC.fcntl(s, FC.F_SETFL, FC.O_NONBLOCK))
assert(S.setsockopt(s, S.SOL_SOCKET, S.SO_REUSEADDR, 1))

res = assert(S.getaddrinfo("127.0.0.1", "3456", {family = S.AF_INET, socktype= S.SOCK_DGRAM, flags = bit.bor(S.AI_NUMERICHOST, S.AI_NUMERICSERV, S.AI_PASSIVE)}))
print(res)
for k, v in pairs(res) do
  print(k, ': ', v)
end
for k, v in pairs(res[1]) do
  print('\t', k, ': ', v)
end
assert(S.bind(s, res[1]))
dmm.self:sockevent_subscribe(s, ffi.C.DMM_SOCKEVENT_IN)

local net_ip_send = Net_ip.Send:new()
net_ip_send:createsock(Net_ip.AF_INET, Net_ip.SOCK_DGRAM, 0)
net_ip_send:connect('127.0.0.1:3457')

cpuload:connect('out', net_ip_send, 'in');
cpuload:connect('out', aggregateall, 'in');
memory:connect('out', net_ip_send, 'in');
memory:connect('out', derivative, 'in');
derivative:connect('out', net_ip_send, 'in')
aggregateall:connect('out', net_ip_send, 'in')

local net_ip_recv = Net_ip.Recv:new()

net_ip_recv:createsock(Net_ip.AF_INET, Net_ip.SOCK_DGRAM, 0)
net_ip_recv:bind('127.0.0.1:3457')

net_ip_recv:connect('out', dbgprinter.nodeid, 'in')

timer:setperiodic(1, 0)
cpuload:timer_subscribe(timer)
memory:timer_subscribe(timer)

aggtimer:setperiodic(10, 0)
aggregateall:timer_subscribe(aggtimer)
